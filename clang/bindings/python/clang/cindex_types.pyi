from ctypes import *
from typing import Callable

class Config:
    class CDLL:
        clang_annotateTokens: Callable[[TranslationUnit, LP_Token, c_uint, LP_Cursor], NoneType]
        clang_CompilationDatabase_dispose: Callable[[LP_c_void_p], NoneType]
        clang_CompilationDatabase_fromDirectory: Callable[[c_interop_string, LP_c_uint], PyCPointerType]
        clang_CompilationDatabase_getAllCompileCommands: Callable[[LP_c_void_p], PyCPointerType]
        clang_CompilationDatabase_getCompileCommands: Callable[[LP_c_void_p, c_interop_string], PyCPointerType]
        clang_CompileCommands_dispose: Callable[[LP_c_void_p], NoneType]
        clang_CompileCommands_getCommand: Callable[[LP_c_void_p, c_uint], PyCPointerType]
        clang_CompileCommands_getSize: Callable[[LP_c_void_p], PyCSimpleType]
        clang_CompileCommand_getArg: Callable[[LP_c_void_p, c_uint], PyCStructType]
        clang_CompileCommand_getDirectory: Callable[[LP_c_void_p], PyCStructType]
        clang_CompileCommand_getFilename: Callable[[LP_c_void_p], PyCStructType]
        clang_CompileCommand_getNumArgs: Callable[[LP_c_void_p], PyCSimpleType]
        clang_codeCompleteAt: Callable[[TranslationUnit, c_interop_string, c_int, c_int, c_void_p, c_int, c_int], PyCPointerType]
        clang_codeCompleteGetDiagnostic: Callable[[CodeCompletionResults, c_int], type]
        clang_codeCompleteGetNumDiagnostics: Callable[[CodeCompletionResults], PyCSimpleType]
        clang_createIndex: Callable[[c_int, c_int], PyCPointerType]
        clang_createTranslationUnit: Callable[[Index, c_interop_string], PyCPointerType]
        clang_CXXConstructor_isConvertingConstructor: Callable[[Cursor], type]
        clang_CXXConstructor_isCopyConstructor: Callable[[Cursor], type]
        clang_CXXConstructor_isDefaultConstructor: Callable[[Cursor], type]
        clang_CXXConstructor_isMoveConstructor: Callable[[Cursor], type]
        clang_CXXField_isMutable: Callable[[Cursor], type]
        clang_CXXMethod_isConst: Callable[[Cursor], type]
        clang_CXXMethod_isDefaulted: Callable[[Cursor], type]
        clang_CXXMethod_isDeleted: Callable[[Cursor], type]
        clang_CXXMethod_isCopyAssignmentOperator: Callable[[Cursor], type]
        clang_CXXMethod_isMoveAssignmentOperator: Callable[[Cursor], type]
        clang_CXXMethod_isExplicit: Callable[[Cursor], type]
        clang_CXXMethod_isPureVirtual: Callable[[Cursor], type]
        clang_CXXMethod_isStatic: Callable[[Cursor], type]
        clang_CXXMethod_isVirtual: Callable[[Cursor], type]
        clang_CXXRecord_isAbstract: Callable[[Cursor], type]
        clang_EnumDecl_isScoped: Callable[[Cursor], type]
        clang_defaultDiagnosticDisplayOptions: Callable[[], PyCSimpleType]
        clang_defaultSaveOptions: Callable[[TranslationUnit], PyCSimpleType]
        clang_disposeCodeCompleteResults: Callable[[CodeCompletionResults], NoneType]
        clang_disposeDiagnostic: Callable[[Diagnostic], NoneType]
        clang_disposeIndex: Callable[[Index], NoneType]
        clang_disposeString: Callable[[_CXString], NoneType]
        clang_disposeTokens: Callable[[TranslationUnit, LP_Token, c_uint], NoneType]
        clang_disposeTranslationUnit: Callable[[TranslationUnit], NoneType]
        clang_equalCursors: Callable[[Cursor, Cursor], type]
        clang_equalLocations: Callable[[SourceLocation, SourceLocation], type]
        clang_equalRanges: Callable[[SourceRange, SourceRange], type]
        clang_equalTypes: Callable[[Type, Type], type]
        clang_formatDiagnostic: Callable[[Diagnostic, c_uint], PyCStructType]
        clang_getArgType: Callable[[Type, c_uint], PyCStructType]
        clang_getArrayElementType: Callable[[Type], PyCStructType]
        clang_getArraySize: Callable[[Type], PyCSimpleType]
        clang_getFieldDeclBitWidth: Callable[[Cursor], PyCSimpleType]
        clang_getCanonicalCursor: Callable[[Cursor], PyCStructType]
        clang_getCanonicalType: Callable[[Type], PyCStructType]
        clang_getChildDiagnostics: Callable[[Diagnostic], PyCPointerType]
        clang_getCompletionAvailability: Callable[[c_void_p], PyCSimpleType]
        clang_getCompletionBriefComment: Callable[[c_void_p], PyCStructType]
        clang_getCompletionChunkCompletionString: Callable[[c_void_p, c_int], PyCPointerType]
        clang_getCompletionChunkKind: Callable[[c_void_p, c_int], PyCSimpleType]
        clang_getCompletionChunkText: Callable[[c_void_p, c_int], PyCStructType]
        clang_getCompletionPriority: Callable[[c_void_p], PyCSimpleType]
        clang_getCString: Callable[[_CXString], PyCSimpleType]
        clang_getCursor: Callable[[TranslationUnit, SourceLocation], PyCStructType]
        clang_getCursorAvailability: Callable[[Cursor], PyCSimpleType]
        clang_getCursorDefinition: Callable[[Cursor], PyCStructType]
        clang_getCursorDisplayName: Callable[[Cursor], PyCStructType]
        clang_getCursorExtent: Callable[[Cursor], PyCStructType]
        clang_getCursorLexicalParent: Callable[[Cursor], PyCStructType]
        clang_getCursorLocation: Callable[[Cursor], PyCStructType]
        clang_getCursorReferenced: Callable[[Cursor], PyCStructType]
        clang_getCursorReferenceNameRange: Callable[[Cursor, c_uint, c_uint], PyCStructType]
        clang_getCursorResultType: Callable[[Cursor], PyCStructType]
        clang_getCursorSemanticParent: Callable[[Cursor], PyCStructType]
        clang_getCursorSpelling: Callable[[Cursor], PyCStructType]
        clang_getCursorType: Callable[[Cursor], PyCStructType]
        clang_getCursorUSR: Callable[[Cursor], PyCStructType]
        clang_Cursor_getMangling: Callable[[Cursor], PyCStructType]
        clang_getCXXAccessSpecifier: Callable[[Cursor], PyCSimpleType]
        clang_getDeclObjCTypeEncoding: Callable[[Cursor], PyCStructType]
        clang_getDiagnostic: Callable[[LP_c_void_p, c_uint], PyCPointerType]
        clang_getDiagnosticCategory: Callable[[Diagnostic], PyCSimpleType]
        clang_getDiagnosticCategoryText: Callable[[Diagnostic], PyCStructType]
        clang_getDiagnosticFixIt: Callable[[Diagnostic, c_uint, LP_SourceRange], PyCStructType]
        clang_getDiagnosticInSet: Callable[[LP_c_void_p, c_uint], PyCPointerType]
        clang_getDiagnosticLocation: Callable[[Diagnostic], PyCStructType]
        clang_getDiagnosticNumFixIts: Callable[[Diagnostic], PyCSimpleType]
        clang_getDiagnosticNumRanges: Callable[[Diagnostic], PyCSimpleType]
        clang_getDiagnosticOption: Callable[[Diagnostic, LP__CXString], PyCStructType]
        clang_getDiagnosticRange: Callable[[Diagnostic, c_uint], PyCStructType]
        clang_getDiagnosticSeverity: Callable[[Diagnostic], PyCSimpleType]
        clang_getDiagnosticSpelling: Callable[[Diagnostic], PyCStructType]
        clang_getElementType: Callable[[Type], PyCStructType]
        clang_getEnumConstantDeclUnsignedValue: Callable[[Cursor], PyCSimpleType]
        clang_getEnumConstantDeclValue: Callable[[Cursor], PyCSimpleType]
        clang_getEnumDeclIntegerType: Callable[[Cursor], PyCStructType]
        clang_getFile: Callable[[TranslationUnit, c_interop_string], PyCPointerType]
        clang_getFileName: Callable[[File], PyCStructType]
        clang_getFileTime: Callable[[File], PyCSimpleType]
        clang_getIBOutletCollectionType: Callable[[Cursor], PyCStructType]
        clang_getIncludedFile: Callable[[Cursor], PyCPointerType]
        clang_getInclusions: Callable[[TranslationUnit, CFunctionType, py_object], NoneType]
        clang_getInstantiationLocation: Callable[[SourceLocation, LP_LP_c_void_p, LP_c_uint, LP_c_uint, LP_c_uint], NoneType]
        clang_getLocation: Callable[[TranslationUnit, File, c_uint, c_uint], PyCStructType]
        clang_getLocationForOffset: Callable[[TranslationUnit, File, c_uint], PyCStructType]
        clang_getNullCursor: Callable[[], PyCStructType]
        clang_getNumArgTypes: Callable[[Type], PyCSimpleType]
        clang_getNumCompletionChunks: Callable[[c_void_p], PyCSimpleType]
        clang_getNumDiagnostics: Callable[[LP_c_void_p], PyCSimpleType]
        clang_getNumDiagnosticsInSet: Callable[[LP_c_void_p], PyCSimpleType]
        clang_getNumElements: Callable[[Type], PyCSimpleType]
        clang_getNumOverloadedDecls: Callable[[Cursor], PyCSimpleType]
        clang_getOverloadedDecl: Callable[[Cursor, c_uint], PyCStructType]
        clang_getPointeeType: Callable[[Type], PyCStructType]
        clang_getRange: Callable[[SourceLocation, SourceLocation], PyCStructType]
        clang_getRangeEnd: Callable[[SourceRange], PyCStructType]
        clang_getRangeStart: Callable[[SourceRange], PyCStructType]
        clang_getResultType: Callable[[Type], PyCStructType]
        clang_getSpecializedCursorTemplate: Callable[[Cursor], PyCStructType]
        clang_getTemplateCursorKind: Callable[[Cursor], PyCSimpleType]
        clang_getTokenExtent: Callable[[TranslationUnit, Token], PyCStructType]
        clang_getTokenKind: Callable[[Token], PyCSimpleType]
        clang_getTokenLocation: Callable[[TranslationUnit, Token], PyCStructType]
        clang_getTokenSpelling: Callable[[TranslationUnit, Token], PyCStructType]
        clang_getTranslationUnitCursor: Callable[[TranslationUnit], PyCStructType]
        clang_getTranslationUnitSpelling: Callable[[TranslationUnit], PyCStructType]
        clang_getTUResourceUsageName: Callable[[c_uint], PyCSimpleType]
        clang_getTypeDeclaration: Callable[[Type], PyCStructType]
        clang_getTypedefDeclUnderlyingType: Callable[[Cursor], PyCStructType]
        clang_getTypedefName: Callable[[Type], PyCStructType]
        clang_getTypeKindSpelling: Callable[[c_uint], PyCStructType]
        clang_getTypeSpelling: Callable[[Type], PyCStructType]
        clang_hashCursor: Callable[[Cursor], PyCSimpleType]
        clang_isAttribute: Callable[[CursorKind], type]
        clang_isConstQualifiedType: Callable[[Type], type]
        clang_isCursorDefinition: Callable[[Cursor], type]
        clang_isDeclaration: Callable[[CursorKind], type]
        clang_isExpression: Callable[[CursorKind], type]
        clang_isFileMultipleIncludeGuarded: Callable[[TranslationUnit, File], type]
        clang_isFunctionTypeVariadic: Callable[[Type], type]
        clang_isInvalid: Callable[[CursorKind], type]
        clang_isPODType: Callable[[Type], type]
        clang_isPreprocessing: Callable[[CursorKind], type]
        clang_isReference: Callable[[CursorKind], type]
        clang_isRestrictQualifiedType: Callable[[Type], type]
        clang_isStatement: Callable[[CursorKind], type]
        clang_isTranslationUnit: Callable[[CursorKind], type]
        clang_isUnexposed: Callable[[CursorKind], type]
        clang_isVirtualBase: Callable[[Cursor], type]
        clang_isVolatileQualifiedType: Callable[[Type], type]
        clang_parseTranslationUnit: Callable[[Index, c_interop_string, c_void_p, c_int, c_void_p, c_int, c_int], PyCPointerType]
        clang_reparseTranslationUnit: Callable[[TranslationUnit, c_int, c_void_p, c_int], PyCSimpleType]
        clang_saveTranslationUnit: Callable[[TranslationUnit, c_interop_string, c_uint], PyCSimpleType]
        clang_tokenize: Callable[[TranslationUnit, SourceRange, LP_LP_Token, LP_c_uint], NoneType]
        clang_visitChildren: Callable[[Cursor, CFunctionType, py_object], PyCSimpleType]
        clang_Cursor_getNumArguments: Callable[[Cursor], PyCSimpleType]
        clang_Cursor_getArgument: Callable[[Cursor, c_uint], PyCStructType]
        clang_Cursor_getNumTemplateArguments: Callable[[Cursor], PyCSimpleType]
        clang_Cursor_getTemplateArgumentKind: Callable[[Cursor, c_uint], method]
        clang_Cursor_getTemplateArgumentType: Callable[[Cursor, c_uint], PyCStructType]
        clang_Cursor_getTemplateArgumentValue: Callable[[Cursor, c_uint], PyCSimpleType]
        clang_Cursor_getTemplateArgumentUnsignedValue: Callable[[Cursor, c_uint], PyCSimpleType]
        clang_Cursor_isAnonymous: Callable[[Cursor], type]
        clang_Cursor_isBitField: Callable[[Cursor], type]
        clang_Cursor_getBriefCommentText: Callable[[Cursor], PyCStructType]
        clang_Cursor_getRawCommentText: Callable[[Cursor], PyCStructType]
        clang_Cursor_getOffsetOfField: Callable[[Cursor], PyCSimpleType]
        clang_Location_isFromMainFile: Callable[[SourceLocation], type]
        clang_Location_isInSystemHeader: Callable[[SourceLocation], type]
        clang_Type_getAlignOf: Callable[[Type], PyCSimpleType]
        clang_Type_getClassType: Callable[[Type], PyCStructType]
        clang_Type_getNumTemplateArguments: Callable[[Type], PyCSimpleType]
        clang_Type_getTemplateArgumentAsType: Callable[[Type, c_uint], PyCStructType]
        clang_Type_getOffsetOf: Callable[[Type, c_interop_string], PyCSimpleType]
        clang_Type_getSizeOf: Callable[[Type], PyCSimpleType]
        clang_Type_getCXXRefQualifier: Callable[[Type], PyCSimpleType]
        clang_Type_getNamedType: Callable[[Type], PyCStructType]
        clang_Type_visitFields: Callable[[Type, CFunctionType, py_object], PyCSimpleType]
